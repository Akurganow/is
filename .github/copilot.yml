# GitHub Copilot configuration for the @plq/is TypeScript utility library
# This configuration helps Copilot understand the project structure and coding patterns

# Knowledge base - Include key documentation and configuration files
knowledge_base:
  # Project documentation and configuration
  - README.md
  - package.json
  - tsconfig.json
  - .eslintrc.json
  - jest.config.ts
  
  # Source code patterns - help Copilot understand the utility function patterns
  - src/index.ts
  - src/utils/detect.ts
  - src/utils/get-tag.ts
  - src/utils/is-string.ts
  - src/utils/is-object.ts
  - src/utils/is-array.ts
  
  # Test patterns - help Copilot understand testing conventions
  - __tests__/tests.ts
  - __tests__/detect.test.ts
  - __tests__/empty.test.ts

# Coding conventions and patterns
patterns:
  # TypeScript utility function pattern
  - name: "Type guard utility function"
    description: "Functions that check types and act as TypeScript type guards"
    example: |
      export default function isString(value: unknown): value is string {
        return typeof value === 'string'
      }
  
  # Test pattern for utility functions
  - name: "Utility function test pattern"
    description: "Testing pattern for type checking utility functions"
    example: |
      describe('isString', () => { 
        tests('string', isString) 
      })

# File inclusion preferences
include:
  - "src/**/*.ts"
  - "__tests__/**/*.ts"
  - "*.md"
  - "*.json"
  - "*.yml"
  - "*.yaml"

# File exclusion preferences
exclude:
  - "node_modules/**"
  - "lib/**"
  - "dist/**"
  - "coverage/**"
  - "*.log"

# Project context
context:
  description: "TypeScript utility library providing type checking functions"
  language: "TypeScript"
  framework: "Node.js"
  testing: "Jest"
  linting: "ESLint with TypeScript rules"
  build: "TypeScript compiler"
  
  # Key concepts for this project
  concepts:
    - "Type guards"
    - "TypeScript utility functions" 
    - "Type checking"
    - "JavaScript/TypeScript type detection"
    - "Functional programming patterns"
    - "Module exports with default functions"

# Development workflow preferences
workflow:
  # Preferred code style based on existing patterns
  style:
    - "Use TypeScript type guards with 'value is Type' return types"
    - "Export utility functions as default exports"
    - "Use simple, focused functions that do one thing well"
    - "Follow existing naming convention: is[Type] for type checking functions"
    - "Include JSDoc comments for complex functions"
    
  # Testing preferences  
  testing:
    - "Use Jest for testing"
    - "Follow existing test patterns with describe blocks"
    - "Test both positive and negative cases"
    - "Use the shared 'tests' helper function when applicable"
    
  # Documentation preferences
  documentation:
    - "Update README.md when adding new functions"
    - "Include usage examples in documentation"
    - "Follow existing documentation format"